parameters:
- name: stackName
  type: string
  default: ''
  displayName: Name of the project
- name: azureConnection
  type: string
  default: ''
  displayName: Name of Azure connection to use
- name: configKeyVault
  type: string
  default: ''
  displayName: Name of Key Vault storing the access credentials
- name: cfnTemplate
  type: string
  default: ''
  displayName: Path to the CloudFormation template file which will be deployed
- name: AWSRegion
  type: string
  default: ''
  displayName: Name of AWS Region you want to deploy in
- name: AWSAccount
  type: string
  default: 'DEVTEST'
  displayName: Name of AWS Account in ALL CAPS that you want to deploy in
- name: artifactName
  type: string
  displayName: Name of pipeline artifact
- name: cmdLineParameterString
  type: string
  default: ''
  displayName: The AWS Cli command parameter string

steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'current'
      artifact: ${{ parameters.artifactName }}
      path: '$(Pipeline.Workspace)'
  - task: AzureCLI@2
    displayName: "Environment: add secrets"
    inputs:
      azureSubscription: ${{ parameters.AzureConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Output "Retrieving secrets from ${{ parameters.configKeyVault }}"
        $secretList = (az keyvault secret list --vault-name ${{ parameters.configKeyVault }} | ConvertFrom-Json)
        $secrets = $secretList | ForEach-Object  { "export $(($_.name -creplace '(?<!^)\p{Lu}', '_$&').ToUpper())=$(((az keyvault secret show --id $($_.id)) | ConvertFrom-Json).value )" }
        Write-Output "Secrets extracted:"
        $secretList | ForEach-Object { "$($_.name)" }
        $secretList = ""
        if  ($secrets) {
          $secrets > $(Pipeline.Workspace)/secrets.env
        }
        else {
          Write-Error "No secrets retrieved. Halting execution!"
          Exit1
        }
        Write-Output "Cleaning up secrets..."
        $secrets = ""
        Write-Output "All done!"
  - script: |
      export $(cat $(Pipeline.Workspace)/secrets.env | xargs)
      export AWS_ACCESS_KEY_ID=$AWS_${{parameters.AWSAccount}}_ACCESS_KEY_ID
      export AWS_SECRET_ACCESS_KEY=$AWS_${{parameters.AWSAccount}}_SECRET_ACCESS_KEY
      export AWS_DEFAULT_REGION=${{parameters.AWSRegion}}
      if aws cloudformation describe-stacks --stack-name "$AWS_SCAFFOLD_${{parameters.stackName}}_STACKNAME" ; then
        echo '${{parameters.stackName}} Stack found. Updating...'
        aws cloudformation update-stack --stack-name "$AWS_SCAFFOLD_${{parameters.stackName}}_STACKNAME" --capabilities CAPABILITY_NAMED_IAM --template-body "file://${{parameters.cfnTemplate}}" --parameters ${{ parameters.cmdLineParameterString }} --debug &> output.txt
        if cat output.txt | grep -q 'No updates are to be performed' ; then
          echo 'No updates detected. Exiting gracefully without waiting...'
          exit 0
        else
          echo 'Waiting for stack to be updated...'
          aws cloudformation wait stack-update-complete --stack-name "$AWS_SCAFFOLD_${{parameters.stackName}}_STACKNAME"
        fi 
        aws cloudformation wait stack-update-complete --stack-name "$AWS_SCAFFOLD_${{parameters.stackName}}_STACKNAME"
      else
        echo '${{parameters.stackName}} Stack NOT FOUND. Creating...'
        aws cloudformation create-stack --stack-name "$AWS_SCAFFOLD_${{parameters.stackName}}_STACKNAME" --capabilities CAPABILITY_NAMED_IAM --template-body "file://${{parameters.cfnTemplate}}" --parameters ${{ parameters.cmdLineParameterString }}
        aws cloudformation wait stack-create-complete --stack-name "$AWS_SCAFFOLD_${{parameters.stackName}}_STACKNAME"
      fi
    workingDirectory: $(Pipeline.Workspace)
    displayName: "AWS Cli deploy"